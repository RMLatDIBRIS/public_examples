insert(index,val) matches {event:'func_pre',name:'my_insert',args:[index,val]};
remove(index,val) matches  {event:'func_post',name:'my_remove',args:[index],res:val};
size(s) matches {event:'func_post',name:'my_size',args:[],res:s};
get(index,val) matches {event:'func_post',name:'my_get',args:[index],res:val};

insert_sz(s) matches insert(index,_) with index >= 0 && index <= s;
remove_sz(s) matches remove(index,_) with index >= 0 && index < s;
get_sz(s) matches get(index,_) with index >= 0 && index < s;
size matches size(_);

// Events that may modify a given index
insert_before(s) matches insert(index,_) with index <= s;
insert_after(s) matches insert(index,_) with index > s;
remove_before(s) matches remove(index,_) with index < s;
remove_after(s) matches remove(index,_) with index > s;
get_different(s) matches get(index,_) with index < s || index > s;
everything_else(s) matches get_different(s)|remove_after(s);

relevant matches insert(_,_)|remove(_,_)|size(_)|get(_,_);
add_rm matches insert(_,_)|remove(_,_);
get_size(s) matches size(s)|get_sz(s);
not_insert not matches  insert(_,_);

Main = relevant >> (List<0> /\ CheckEl);
List<s> = get_size(s)* (insert_sz(s) List<s+1> remove_sz(s+1) List<s>)?;
CheckEl = not_insert* {let index,val; insert(index,val) GetVal<index,val> CheckEl}?;
GetVal<index,val> = 
					(insert_before(index) GetVal<index+1,val> all /\ CheckEl) \/ 
					(insert_after(index) GetVal<index,val> all /\ CheckEl) \/ 
					(remove_before(index) GetVal<index-1,val>) \/
					(remove_after(index) GetVal<index,val>) \/
					(get(index,val) GetVal<index,val>) \/
					(get_different(index) GetVal<index,val>) \/
					(size GetVal<index,val>) \/
					remove(index,val);