// list_iterators: multiple iterators over a single list, weak version
// works with traces generated from list-iterators.js
// verifies only that next(id) occurs after hasNext(id,true) and that the result of hasNext(id,res) can change only after next(id)
// multiple consecutive occurrences of hasNext are allowed, as long as they are coherent
// iterators are not required to be fully consumed


list matches {event:'func_pre',name:'add'|'remove'}; // track only structural modifications
hasNext(id,res) matches {event:'func_post',name:'hasNext',res:res,args:[id]};
next(id) matches {event:'func_pre',name:'next',args:[id]};
newIter(id) matches {event:'func_post',name:'iterator',res:id,args:[]};
freeIter(id) matches {event:'func_post',name:'free',res:id};

hasNext_or_next(id) matches hasNext(id,_) | next(id);
iterator matches newIter(_) | hasNext_or_next(_) | freeIter(_);
not_newIter not matches newIter(_);
list_or_iter(id) matches hasNext_or_next(id) | freeIter(id) | list;

relevant matches iterator | list;

Main = relevant >> ListIterators;
ListIterators = ListSafe /\ iterator >> Iterators;

ListSafe = not_newIter* {let id; newIter(id)(ListSafeIter<id> /\ ListSafe)}?;
ListSafeIter<id> = list_or_iter(id) >> hasNext_or_next(id)* list* freeIter(id) all;

Iterators = {let id; newIter(id)(Iterator<id> freeIter(id)|Iterators)}?;
Iterator<id> = ((hasNext(id,true)+ next(id))* hasNext(id,false)+)!;
