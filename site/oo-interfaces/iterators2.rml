// iterators2: multiple iterators, weak version
// works with traces generated from iterators2.js
// verifies only that next(id) occurs after hasNext(id,true) and that the result of hasNext(id,res) can change only after next(id)
// multiple consecutive occurrences of hasNext are allowed, as long as they are coherent
// the iterator is not required to be fully consumed

hasNext(id,res) matches {event:'func_post',name:'hasNext',res:res,args:[id]};
next(id) matches {event:'func_pre',name:'next',args:[id]};
newIter(id) matches {event:'func_post',name:'iterator',res:id,args:[]};
freeIter(id) matches {event:'func_post',name:'free',res:id};

relevant matches hasNext(_,_) | next(_) | newIter(_) | freeIter(_);

Main = relevant >> Iterators;
Iterators = {let id; newIter(id)(Iterator<id> freeIter(id)|Iterators)}?;
Iterator<id> = ((hasNext(id,true)+ next(id))* hasNext(id,false)+)!;

